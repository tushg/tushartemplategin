classDiagram
    class Service {
        <<interface>>
        +GetMessage(ctx, code, lang) Message
        +GetMessageByCode(ctx, code) Message
        +GetMessagesByCategory(ctx, cat, lang) []Message
        +GetMessagesBySeverity(ctx, sev, lang) []Message
        +ListAvailableLanguages(ctx) []string
        +ReloadCatalog(ctx) error
        +HealthCheck(ctx) error
    }
    
    class MessageCatalogService {
        -config MessageCatalogConfig
        -logger Logger
        -cache map[string]map[string]*Message
        -cacheMutex sync.RWMutex
        -lastReload time.Time
        +GetMessage(ctx, code, lang) Message
        +GetMessageByCode(ctx, code) Message
        +GetMessagesByCategory(ctx, cat, lang) []Message
        +GetMessagesBySeverity(ctx, sev, lang) []Message
        +ListAvailableLanguages(ctx) []string
        +ReloadCatalog(ctx) error
        +HealthCheck(ctx) error
        -loadMessagesFromFile(ctx, lang) map[string]*Message
    }
    
    class Message {
        +MessageCode string
        +Category string
        +Severity string
        +Message string
        +DetailedDescription string
        +ResponseAction string
        +Metadata map[string]string
        +CreatedAt time.Time
        +UpdatedAt time.Time
    }
    
    class MessageRequest {
        +MessageCode string
        +Language string
        +Parameters map[string]string
    }
    
    class MessageResponse {
        +MessageCode string
        +Category string
        +Severity string
        +Message string
        +DetailedDescription string
        +ResponseAction string
        +FormattedMessage string
        +Metadata map[string]string
        +Language string
        +Timestamp time.Time
    }
    
    class CatalogStats {
        +TotalMessages int
        +LanguagesCount int
        +CategoriesCount int
        +SeveritiesCount int
        +Languages []string
        +Categories []string
        +Severities []string
        +LastReloaded time.Time
        +MessagesByLanguage map[string]int
    }
    
    class MessageCatalogConfig {
        +DefaultLanguage string
        +SupportedLanguages []string
        +CatalogPath string
        +ReloadInterval int
        +CacheEnabled bool
    }
    
    class Logger {
        <<interface>>
        +Debug(ctx, msg, fields)
        +Info(ctx, msg, fields)
        +Warn(ctx, msg, fields)
        +Error(ctx, msg, fields)
        +Fatal(ctx, err, fields)
    }
    
    class AppError {
        +Code ErrorCode
        +Message string
        +Details string
        +HTTPStatus int
        +Fields map[string]interface{}
        +Err error
        +Error() string
        +Unwrap() error
        +ToJSON() []byte
        +WithField(key, value) AppError
    }
    
    class ErrorCode {
        <<enumeration>>
        +ErrCodeNotFound
        +ErrCodeBadRequest
        +ErrCodeInternalServer
        +ErrCodeServiceUnavailable
    }
    
    Service <|.. MessageCatalogService
    MessageCatalogService --> MessageCatalogConfig : uses
    MessageCatalogService --> Logger : uses
    MessageCatalogService --> Message : creates
    MessageCatalogService --> AppError : creates
    Message --> MessageResponse : converts to
    MessageRequest --> Message : creates
    AppError --> ErrorCode : uses
    
    note for MessageCatalogService "Thread-safe implementation with caching"
    note for Message "Core message entity with metadata"
    note for AppError "Consistent error handling across service"
