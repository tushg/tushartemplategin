// Code generated by MockGen. DO NOT EDIT.
// Source: E:\tushartemplategin\pkg\interfaces\config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	interfaces "tushartemplategin/pkg/interfaces"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseConfig is a mock of DatabaseConfig interface.
type MockDatabaseConfig struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseConfigMockRecorder
}

// MockDatabaseConfigMockRecorder is the mock recorder for MockDatabaseConfig.
type MockDatabaseConfigMockRecorder struct {
	mock *MockDatabaseConfig
}

// NewMockDatabaseConfig creates a new mock instance.
func NewMockDatabaseConfig(ctrl *gomock.Controller) *MockDatabaseConfig {
	mock := &MockDatabaseConfig{ctrl: ctrl}
	mock.recorder = &MockDatabaseConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseConfig) EXPECT() *MockDatabaseConfigMockRecorder {
	return m.recorder
}

// GetMySQL mocks base method.
func (m *MockDatabaseConfig) GetMySQL() interfaces.MySQLConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMySQL")
	ret0, _ := ret[0].(interfaces.MySQLConfig)
	return ret0
}

// GetMySQL indicates an expected call of GetMySQL.
func (mr *MockDatabaseConfigMockRecorder) GetMySQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMySQL", reflect.TypeOf((*MockDatabaseConfig)(nil).GetMySQL))
}

// GetPostgres mocks base method.
func (m *MockDatabaseConfig) GetPostgres() interfaces.PostgresConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostgres")
	ret0, _ := ret[0].(interfaces.PostgresConfig)
	return ret0
}

// GetPostgres indicates an expected call of GetPostgres.
func (mr *MockDatabaseConfigMockRecorder) GetPostgres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostgres", reflect.TypeOf((*MockDatabaseConfig)(nil).GetPostgres))
}

// GetSQLite mocks base method.
func (m *MockDatabaseConfig) GetSQLite() interfaces.SQLiteConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLite")
	ret0, _ := ret[0].(interfaces.SQLiteConfig)
	return ret0
}

// GetSQLite indicates an expected call of GetSQLite.
func (mr *MockDatabaseConfigMockRecorder) GetSQLite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLite", reflect.TypeOf((*MockDatabaseConfig)(nil).GetSQLite))
}

// GetType mocks base method.
func (m *MockDatabaseConfig) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockDatabaseConfigMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockDatabaseConfig)(nil).GetType))
}

// MockPostgresConfig is a mock of PostgresConfig interface.
type MockPostgresConfig struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresConfigMockRecorder
}

// MockPostgresConfigMockRecorder is the mock recorder for MockPostgresConfig.
type MockPostgresConfigMockRecorder struct {
	mock *MockPostgresConfig
}

// NewMockPostgresConfig creates a new mock instance.
func NewMockPostgresConfig(ctrl *gomock.Controller) *MockPostgresConfig {
	mock := &MockPostgresConfig{ctrl: ctrl}
	mock.recorder = &MockPostgresConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresConfig) EXPECT() *MockPostgresConfigMockRecorder {
	return m.recorder
}

// GetConnMaxIdleTime mocks base method.
func (m *MockPostgresConfig) GetConnMaxIdleTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnMaxIdleTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetConnMaxIdleTime indicates an expected call of GetConnMaxIdleTime.
func (mr *MockPostgresConfigMockRecorder) GetConnMaxIdleTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnMaxIdleTime", reflect.TypeOf((*MockPostgresConfig)(nil).GetConnMaxIdleTime))
}

// GetConnMaxLifetime mocks base method.
func (m *MockPostgresConfig) GetConnMaxLifetime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnMaxLifetime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetConnMaxLifetime indicates an expected call of GetConnMaxLifetime.
func (mr *MockPostgresConfigMockRecorder) GetConnMaxLifetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnMaxLifetime", reflect.TypeOf((*MockPostgresConfig)(nil).GetConnMaxLifetime))
}

// GetHost mocks base method.
func (m *MockPostgresConfig) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockPostgresConfigMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockPostgresConfig)(nil).GetHost))
}

// GetMaxIdleConns mocks base method.
func (m *MockPostgresConfig) GetMaxIdleConns() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxIdleConns")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxIdleConns indicates an expected call of GetMaxIdleConns.
func (mr *MockPostgresConfigMockRecorder) GetMaxIdleConns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxIdleConns", reflect.TypeOf((*MockPostgresConfig)(nil).GetMaxIdleConns))
}

// GetMaxOpenConns mocks base method.
func (m *MockPostgresConfig) GetMaxOpenConns() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxOpenConns")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxOpenConns indicates an expected call of GetMaxOpenConns.
func (mr *MockPostgresConfigMockRecorder) GetMaxOpenConns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxOpenConns", reflect.TypeOf((*MockPostgresConfig)(nil).GetMaxOpenConns))
}

// GetMaxRetries mocks base method.
func (m *MockPostgresConfig) GetMaxRetries() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxRetries indicates an expected call of GetMaxRetries.
func (mr *MockPostgresConfigMockRecorder) GetMaxRetries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxRetries", reflect.TypeOf((*MockPostgresConfig)(nil).GetMaxRetries))
}

// GetName mocks base method.
func (m *MockPostgresConfig) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockPostgresConfigMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockPostgresConfig)(nil).GetName))
}

// GetPassword mocks base method.
func (m *MockPostgresConfig) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockPostgresConfigMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockPostgresConfig)(nil).GetPassword))
}

// GetPort mocks base method.
func (m *MockPostgresConfig) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockPostgresConfigMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockPostgresConfig)(nil).GetPort))
}

// GetRetryDelay mocks base method.
func (m *MockPostgresConfig) GetRetryDelay() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryDelay")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRetryDelay indicates an expected call of GetRetryDelay.
func (mr *MockPostgresConfigMockRecorder) GetRetryDelay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryDelay", reflect.TypeOf((*MockPostgresConfig)(nil).GetRetryDelay))
}

// GetSSLMode mocks base method.
func (m *MockPostgresConfig) GetSSLMode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSLMode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSSLMode indicates an expected call of GetSSLMode.
func (mr *MockPostgresConfigMockRecorder) GetSSLMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSLMode", reflect.TypeOf((*MockPostgresConfig)(nil).GetSSLMode))
}

// GetTimeout mocks base method.
func (m *MockPostgresConfig) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockPostgresConfigMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockPostgresConfig)(nil).GetTimeout))
}

// GetUsername mocks base method.
func (m *MockPostgresConfig) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername.
func (mr *MockPostgresConfigMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockPostgresConfig)(nil).GetUsername))
}

// MockSQLiteConfig is a mock of SQLiteConfig interface.
type MockSQLiteConfig struct {
	ctrl     *gomock.Controller
	recorder *MockSQLiteConfigMockRecorder
}

// MockSQLiteConfigMockRecorder is the mock recorder for MockSQLiteConfig.
type MockSQLiteConfigMockRecorder struct {
	mock *MockSQLiteConfig
}

// NewMockSQLiteConfig creates a new mock instance.
func NewMockSQLiteConfig(ctrl *gomock.Controller) *MockSQLiteConfig {
	mock := &MockSQLiteConfig{ctrl: ctrl}
	mock.recorder = &MockSQLiteConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLiteConfig) EXPECT() *MockSQLiteConfigMockRecorder {
	return m.recorder
}

// GetPath mocks base method.
func (m *MockSQLiteConfig) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockSQLiteConfigMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockSQLiteConfig)(nil).GetPath))
}

// GetTimeout mocks base method.
func (m *MockSQLiteConfig) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockSQLiteConfigMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockSQLiteConfig)(nil).GetTimeout))
}

// MockMySQLConfig is a mock of MySQLConfig interface.
type MockMySQLConfig struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLConfigMockRecorder
}

// MockMySQLConfigMockRecorder is the mock recorder for MockMySQLConfig.
type MockMySQLConfigMockRecorder struct {
	mock *MockMySQLConfig
}

// NewMockMySQLConfig creates a new mock instance.
func NewMockMySQLConfig(ctrl *gomock.Controller) *MockMySQLConfig {
	mock := &MockMySQLConfig{ctrl: ctrl}
	mock.recorder = &MockMySQLConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMySQLConfig) EXPECT() *MockMySQLConfigMockRecorder {
	return m.recorder
}

// GetHost mocks base method.
func (m *MockMySQLConfig) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockMySQLConfigMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockMySQLConfig)(nil).GetHost))
}

// GetName mocks base method.
func (m *MockMySQLConfig) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockMySQLConfigMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockMySQLConfig)(nil).GetName))
}

// GetPassword mocks base method.
func (m *MockMySQLConfig) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockMySQLConfigMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockMySQLConfig)(nil).GetPassword))
}

// GetPort mocks base method.
func (m *MockMySQLConfig) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockMySQLConfigMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockMySQLConfig)(nil).GetPort))
}

// GetTimeout mocks base method.
func (m *MockMySQLConfig) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockMySQLConfigMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockMySQLConfig)(nil).GetTimeout))
}

// GetUsername mocks base method.
func (m *MockMySQLConfig) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername.
func (mr *MockMySQLConfigMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockMySQLConfig)(nil).GetUsername))
}
